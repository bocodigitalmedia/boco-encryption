// Generated by CoffeeScript 1.11.1
var Base64Stream, BocoEncryption, Minimist, Path, decrypt, decryptStream, encrypt, encryptStream, help, main;

Path = require('path');

BocoEncryption = require('.');

Minimist = require('minimist');

Base64Stream = require('base64-stream');

encrypt = function(arg) {
  var argv, buffer, encoding, encryption, str;
  encryption = arg.encryption, str = arg.str, argv = arg.argv;
  if (str == null) {
    return help();
  }
  encoding = argv.base64 ? "base64" : null;
  buffer = Buffer(str);
  return encryption.encrypt(buffer, function(error, encrypted) {
    if (error != null) {
      throw error;
    }
    process.stdout.write(encrypted.toString(encoding));
    process.stdout.write("\n");
    return process.exit(0);
  });
};

decrypt = function(arg) {
  var argv, buffer, encoding, encryption, str;
  encryption = arg.encryption, str = arg.str, argv = arg.argv;
  if (str == null) {
    return help();
  }
  encoding = argv.base64 ? "base64" : null;
  buffer = Buffer(str, encoding);
  return encryption.decrypt(buffer, function(error, decrypted) {
    if (error != null) {
      throw error;
    }
    process.stdout.write(decrypted);
    process.stdout.write("\n");
    return process.exit(0);
  });
};

encryptStream = function(arg) {
  var argv, encryption, stream;
  encryption = arg.encryption, argv = arg.argv;
  stream = encryption.encryptStream(process.stdin);
  if (argv.base64) {
    stream = stream.pipe(Base64Stream.encode());
  }
  return stream.pipe(process.stdout);
};

decryptStream = function(arg) {
  var argv, encryptedStream, encryption, stream;
  encryption = arg.encryption, argv = arg.argv;
  encryptedStream = process.stdin;
  if (argv.base64) {
    encryptedStream = encryptedStream.pipe(Base64Stream.decode());
  }
  stream = encryption.decryptStream(encryptedStream);
  return stream.pipe(process.stdout);
};

help = function() {
  return process.stdout.write("Usage: boco-encryption <command> [<args...>] [--base64]\n\nCommands:\n  encrypt <string> --base64\n  decrypt <string> --base64\n  encrypt-stream --base64 < <stream>\n  decrypt-stream --base64 < <stream>\n\nOptions:\n  --base64 - use base64 encoding for reading and writing encrypted data\n");
};

main = function() {
  var argv, command, config, encryption, ref, ref1, str;
  argv = Minimist(process.argv.slice(2));
  ref = argv._, command = ref[0], str = ref[1];
  config = (ref1 = argv.config) != null ? ref1 : './boco-encryption.config.js';
  encryption = (function() {
    try {
      return require(Path.resolve(config));
    } catch (error1) {}
  })();
  if (encryption == null) {
    encryption = BocoEncryption.cipherIv();
  }
  switch (command) {
    case 'encrypt':
      return encrypt({
        encryption: encryption,
        str: str,
        argv: argv
      });
    case 'decrypt':
      return decrypt({
        encryption: encryption,
        str: str,
        argv: argv
      });
    case 'encrypt-stream':
      return encryptStream({
        encryption: encryption,
        argv: argv
      });
    case 'decrypt-stream':
      return decryptStream({
        encryption: encryption,
        argv: argv
      });
    default:
      return help();
  }
};

module.exports = {
  main: main,
  help: help,
  encrypt: encrypt,
  decrypt: decrypt,
  encryptStream: encryptStream,
  decryptStream: decryptStream
};

if ((typeof module !== "undefined" && module !== null ? module.parent : void 0) == null) {
  return main();
}

//# sourceMappingURL=cli.js.map
