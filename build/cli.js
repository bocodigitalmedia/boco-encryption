// Generated by CoffeeScript 1.11.1
var Base64Stream, BocoEncryption, Minimist, Path, decrypt, decryptStream, encrypt, encryptStream, getEncryption, help, main;

Path = require('path');

BocoEncryption = require('.');

Minimist = require('minimist');

Base64Stream = require('base64-stream');

encrypt = function(arg) {
  var argv, buffer, encoding, encryption, str;
  encryption = arg.encryption, str = arg.str, argv = arg.argv;
  if (str == null) {
    return help();
  }
  encoding = argv.base64 ? "base64" : null;
  buffer = Buffer(str);
  return encryption.encrypt(buffer, function(error, encrypted) {
    if (error != null) {
      throw error;
    }
    process.stdout.write(encrypted.toString(encoding));
    process.stdout.write("\n");
    return process.exit(0);
  });
};

decrypt = function(arg) {
  var argv, buffer, encoding, encryption, str;
  encryption = arg.encryption, str = arg.str, argv = arg.argv;
  if (str == null) {
    return help();
  }
  encoding = argv.base64 ? "base64" : null;
  buffer = Buffer(str, encoding);
  return encryption.decrypt(buffer, function(error, decrypted) {
    if (error != null) {
      throw error;
    }
    process.stdout.write(decrypted);
    process.stdout.write("\n");
    return process.exit(0);
  });
};

encryptStream = function(arg) {
  var argv, encryption, stream;
  encryption = arg.encryption, argv = arg.argv;
  stream = encryption.encryptStream(process.stdin);
  if (argv.base64) {
    stream = stream.pipe(Base64Stream.encode());
  }
  return stream.pipe(process.stdout);
};

decryptStream = function(arg) {
  var argv, encryptedStream, encryption, stream;
  encryption = arg.encryption, argv = arg.argv;
  encryptedStream = process.stdin;
  if (argv.base64) {
    encryptedStream = encryptedStream.pipe(Base64Stream.decode());
  }
  stream = encryption.decryptStream(encryptedStream);
  return stream.pipe(process.stdout);
};

help = function() {
  return process.stdout.write("Usage: boco-encryption <command> [<args...>] [--base64]\n\nCommands:\n  encrypt <string> --base64\n  decrypt <string> --base64\n  encrypt-stream --base64 < <stream>\n  decrypt-stream --base64 < <stream>\n\nOptions:\n  --base64 - use base64 encoding for reading and writing encrypted data\n  --config=<path> - use config file specified at <path>. Defaults to boco-encryption.json\n\nConfiguration: json\n  You may configure the encryption using json by specifying the following attributes:\n  * method - the encryption factory method to call (ie: `cipherIv`)\n  * params - the parameters for the factory method\n\nConfiguration: javascript\n  You may configure the encryption using javascript by exporting an async function\n  that returns the BocoEncryption.Encryption instance to use.\n\n  ie: module.exports = function(done) { ... done(null, myEncryption); };");
};

getEncryption = function(arg, done) {
  var base, config, configPath, defaultJsConfig, defaultJsonConfig, encryption, error, method, params;
  configPath = arg.configPath;
  if (configPath != null) {
    try {
      config = require(Path.resolve(configPath));
    } catch (error1) {
      error = error1;
      if (error != null) {
        return done(Error("Cannot load config: " + error.message));
      }
    }
  } else {
    try {
      defaultJsonConfig = require(Path.resolve(__dirname, 'boco-encryption.config.json'));
    } catch (error1) {
      error = error1;
    } finally {
      if (error.code !== 'MODULE_NOT_FOUND') {
        return done(Error("Cannot load config: " + error.message));
      }
    }
    try {
      defaultJsConfig = require(Path.resolve(__dirname, 'boco-encryption.config.js'));
    } catch (error1) {
      error = error1;
    } finally {
      if (error.code !== 'MODULE_NOT_FOUND') {
        return done(Error("Cannot load config: " + error.message));
      }
    }
    error = null;
    config = defaultJsConfig != null ? defaultJsConfig : defaultJsonConfig;
    if (config == null) {
      config = {};
    }
    if (config.method == null) {
      config.method = 'cipherIv';
    }
    if (config.params == null) {
      config.params = {};
    }
    if ((base = config.params).secretKey == null) {
      base.secretKey = process.env.BOCO_ENCRYPTION_SECRET_KEY;
    }
  }
  if (typeof config === 'object') {
    try {
      method = config.method, params = config.params;
      encryption = BocoEncryption[method](params);
    } catch (error1) {
      error = error1;
    } finally {
      if (error != null) {
        return done(error);
      }
      return done(null, encryption);
    }
  }
  if (typeof config === 'function') {
    return config(done);
  }
  return done(Error("Could not create encryption"));
};

main = function() {
  var argv, command, configPath, ref, str;
  argv = Minimist(process.argv.slice(2));
  configPath = argv['config'];
  ref = argv._, command = ref[0], str = ref[1];
  return getEncryption({
    configPath: configPath
  }, function(error, encryption) {
    if (error != null) {
      throw error;
    }
    if (encryption == null) {
      return help();
    }
    switch (command) {
      case 'encrypt':
        return encrypt({
          encryption: encryption,
          str: str,
          argv: argv
        });
      case 'decrypt':
        return decrypt({
          encryption: encryption,
          str: str,
          argv: argv
        });
      case 'encrypt-stream':
        return encryptStream({
          encryption: encryption,
          argv: argv
        });
      case 'decrypt-stream':
        return decryptStream({
          encryption: encryption,
          argv: argv
        });
      default:
        return help();
    }
  });
};

module.exports = {
  main: main,
  help: help,
  encrypt: encrypt,
  decrypt: decrypt,
  encryptStream: encryptStream,
  decryptStream: decryptStream
};

if ((typeof module !== "undefined" && module !== null ? module.parent : void 0) == null) {
  return main();
}

//# sourceMappingURL=cli.js.map
